plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'codenarc'

compileGroovy {
    options.incremental = true
}

dependencies {
    final SPRING_VERSION = '4.1.0.RELEASE'
    final BATCH_VERSION = '3.0.1.RELEASE'
    final LOGBACK_VERSION = '1.0.13'
    final SLF4J_VERSION = '1.7.5'
    final GUAVA_VERSION = guavaVersion
    final JUNIT_VERSION = '4.11'
    final GMOCK_VERSION = '0.8.3'
    final POSTGRESQL_VERSION = '9.3-1102-jdbc41'
    final ORACLE_VERSION = '11.2.0.3.0'
    final H2_VERSION = '1.4.185'
    final HIBERNATE_VALIDATOR_VERSION = '5.2.2.Final'

    compile 'org.codehaus.groovy:groovy-all:2.4.7'

    compile group: 'org.springframework.batch', name: 'spring-batch-core', version: BATCH_VERSION

    compile group: 'org.springframework', name: 'spring-context', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-tx', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-jdbc', version: SPRING_VERSION
//  compile group: 'org.springframework', name: 'spring-orm', version: SPRING_VERSION
//  compile group: 'org.springframework', name: 'spring-oxm', version: SPRING_VERSION

    compile project(':ontology-service')

    compile group: 'com.jolbox', name: 'bonecp-spring', version: '0.8.0.RELEASE'
    compile group: 'com.google.guava', name: 'guava', version: GUAVA_VERSION
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: HIBERNATE_VALIDATOR_VERSION

    compile group: 'ch.qos.logback', name: 'logback-classic', version: LOGBACK_VERSION
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: SLF4J_VERSION

    runtime group: 'org.postgresql', name: 'postgresql', version: POSTGRESQL_VERSION
    runtime group: 'com.oracle',     name: 'ojdbc6',     version: ORACLE_VERSION

    testCompile group: 'org.springframework.batch', name: 'spring-batch-test', version: BATCH_VERSION
    testCompile group: 'org.springframework', name: 'spring-test', version: SPRING_VERSION
    testCompile group: 'junit', name: 'junit', version: JUNIT_VERSION
    testCompile group: 'org.gmock', name: 'gmock', version: GMOCK_VERSION
    testCompile group: 'uk.co.modular-it', name: 'hamcrest-date', version: '0.9.5'

    testCompile group: 'com.h2database', name: 'h2', version: H2_VERSION
}

sourceSets {
    functionalTest {
        java.srcDir 'src/test-func/java'
        groovy.srcDir 'src/test-func/groovy'
        resources.srcDir 'src/test-func/resources'
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }
}

def mainClass = 'org.transmartproject.batch.startup.RunJob'

run {
    mainClassName = mainClass

    maxHeapSize = '4g'

    if (project.hasProperty('args')) {
        def collectedArgs = []
        def matcher = project.args =~ '''(?x)
        (?:
            ([^'"]\\S*) | #unquoted parameter
            (?:'([^']*)')  |
            (?:"([^"]*)")
        )
        (?:\\s+|$)'''
        while (matcher.find()) {
            collectedArgs << matcher.group(1) ?: matcher.group(2) ?: matcher.group(3)
        }

        args collectedArgs
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

shadowJar {
    classifier = null
}

task createVersionFile << {
    def file = new File("$projectDir/VERSION")
    file.createNewFile()
    file.text = "${version}"
}
shadowJar.dependsOn 'createVersionFile'

task travisFunctionalTestPrepare << {
    description = 'Prepares the database for functional testing on Travis.'
    group = 'verification'
}
travisFunctionalTestPrepare.dependsOn 'functionalTestPrepare'

task travisProperties << {
    description = 'Set batchdb.properties for superuser access on Travis.'
    group = 'verification'
    copy {
        from '.'
        into '.'
        include '.batchdb-psql-travis.properties'
        rename { String fileName ->
            fileName == '.batchdb-psql-travis.properties' ? 'batchdb.properties' : null
        }
    }
}

task travisPreparePostgres << {
    description = 'Preparing PostgreSQL database for functional testing on Travis.'
    group = 'verification'
}
travisPreparePostgres.dependsOn 'travisProperties', 'travisFunctionalTestPrepare'
travisFunctionalTestPrepare.shouldRunAfter 'travisProperties'

task functionalTestPrepare(type: JavaExec) {
    description = 'Prepares the database for functional testing.'
    group = 'verification'
    main = 'org.springframework.batch.core.launch.support.CommandLineJobRunner'
    args 'org.transmartproject.batch.preparation.TestDatabasePrepareConfiguration',
            'testDatabasePrepareJob'

    maxHeapSize = '2g'

    classpath += sourceSets.test.runtimeClasspath
    classpath += sourceSets.functionalTest.runtimeClasspath
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'

    systemProperties = ['user.timezone': 'GMT']
    maxHeapSize = '2g'

    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath += sourceSets.test.runtimeClasspath
    classpath += sourceSets.functionalTest.runtimeClasspath

    useJUnit()
    outputs.upToDateWhen { false }

    reports {
        html.destination = file("$reports.html.destination/functional")
        junitXml.destination = file("$reports.junitXml.destination/functional")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

codenarc {
    configFile = new File("${project.projectDir.absolutePath}/gradle/codenarc/ruleset.groovy")

    reportFormat = 'html'
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        //html.destination "${buildDir}/jacocoHtml"
    }
}
jacocoTestReport.executionData functionalTest

task setupSchema(type: JavaExec) {
    description = 'Creates the ts_batch schema.'
    main = 'org.transmartproject.batch.db.BatchSchemaPopulator'
    classpath = sourceSets.main.runtimeClasspath
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
}
