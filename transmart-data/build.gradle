apply plugin: 'distribution'

project.ext {
    environment = [PATH: '/bin/:/usr/bin/:/usr/local/bin/']
}

def make(String target) {
    println "make: ${target}"
    exec {
        commandLine 'bash', '-c', 'source ./vars && make ' + target
    }
}

def sudo_make(String target) {
    println "sudo make: ${target}"
    exec {
        commandLine 'bash', '-c', 'source ./vars && sudo make ' + target
    }
}

task checkDependencies << {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine 'php', '--version'
        standardOutput out
    }
    println out.toString().readLines()[0]
    def php_installed = false
    out.toString().find(/PHP (\d+).(\d+)/) { match, major, minor ->
        if (major > 5 || major == 5 && minor >= 4) {
            println "Found PHP version ${major}.${minor}."
            php_installed = true
        }
    }
    if (!php_installed) {
        throw new StopActionException('PHP version >= 5.4 required.')
    }
    out.reset()
    exec {
        commandLine 'svn', '--version'
        standardOutput out
    }
    println out.toString().readLines()[0]
}

task createVars(type: Exec) {
    commandLine 'make', '-C', 'env', '../vars'
}
createVars.onlyIf { !file('vars').exists() }
createVars.dependsOn 'checkDependencies'

def etl_target = 'env/tranSMART-ETL'

task downloadTransmartETL << {
    def repo = 'https://github.com/transmart/tranSMART-ETL/trunk'
    exec {
        commandLine 'svn', 'checkout', '--depth', 'immediates', repo, etl_target
    }
    exec {
        commandLine 'svn', 'up', '--set-depth=infinity', "${etl_target}/Postgres"
    }
    exec {
        commandLine 'svn', 'up', '--set-depth=infinity', "${etl_target}/Kettle-GPL"
    }
}
downloadTransmartETL.onlyIf { !file(etl_target).exists() }
downloadTransmartETL.dependsOn 'checkDependencies'


task downloadR << {
    make('-C R sources')
}
downloadR.dependsOn 'createVars'
distTar.dependsOn 'downloadR'

task generateRequiredFiles << {
    make('-C data/common makefiles')
    make('-C ddl/postgres/META default_permissions.tsv')
    make('-C data/common/searchapp/plugin_modules_params ../plugin_module.tsv')
}
distTar.dependsOn 'generateRequiredFiles'

task setupPostgres << {
    sudo_make('-C env /var/lib/postgresql/tablespaces')
    make('postgres')
}

task setupPostgresTest << {
    sudo_make('-C env /var/lib/postgresql/tablespaces')
    make('postgres_test')
}

task setupOracle << {
    make('oracle')
}

task setupSolr << {
    make('-C solr solr_home')
}
distTar.dependsOn 'setupSolr'

task startSolr << {
    make('-C solr start_solr')
}

task stopSolr << {
    make('-C solr stop_solr')
}

task dataloadingTest << {
    make('-C env data-integration')
    make('-C samples/postgres load_clinical_GSE8581')
    make('-C samples/postgres showdblog')
}
dataloadingTest.dependsOn 'checkDependencies'

// from https://medium.com/@ungesehn/use-gitignore-for-gradle-task-excludes-e5d011e99f71
def gitignoreToList(File f) {
    def ignores = []

    f.eachLine { line ->
        //ignore comments and empty lines
        if (!line.startsWith('#') && !line.isEmpty()) {
            ignores.add(line)
        }
    }
    return ignores
}

distributions {
    main {
        contents {
            exclude 'lib/schemaSpy_*.jar', 'solr/solr-*/**'
            from '.'
            include 'config/**', 'data/**', 'ddl/**','env/**', 'lib/**', 'R/**', 'samples/**', 'solr/**',
                    'test_data/**', 'updatedb/**',
                    'LICENSE', 'Makefile', 'makefile.inc', 'README.md', 'vars.sample', 'VERSION'
        }
    }
    solr {
        contents {
            from '.'
            include 'solr/**', 'VERSION'
        }
    }
}

distZip.enabled = false
solrDistZip.enabled = false

task createVersionFile << {
    def file = new File("$projectDir/VERSION")
    file.createNewFile()
    file.text = "${version}"
}
distTar.dependsOn 'createVersionFile'

defaultTasks 'createVars'

publishing {
    publications {
        maven(MavenPublication) {
            artifact distTar // Publish the output of the distTar task
        }
        solr(MavenPublication) {
            artifactId 'transmart-data-solr'
            artifact solrDistTar // Publish the output of the solrDistTar task
        }
    }
}

